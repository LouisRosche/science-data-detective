<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Science Data Detective (Competitive Edition)</title>
    
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Chart.js for data visualization -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>
    
    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">

    <!-- Custom Styles -->
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f0f4f8; }
        .header-gradient { background: linear-gradient(135deg, #4f46e5, #7c3aed); }
        .stat-card-gradient { background: linear-gradient(135deg, #10b981, #22d3ee); }
        .level-btn.active { background-color: #4f46e5; color: white; box-shadow: 0 4px 14px 0 rgba(79, 70, 229, 0.39); }
        .level-btn.locked { background-color: #e5e7eb; cursor: not-allowed; color: #9ca3af; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        .level-content.active { animation: fadeIn 0.5s ease-in-out forwards; }
        .modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease; }
        .modal-backdrop.show { opacity: 1; visibility: visible; }
        .modal-content { background-color: white; padding: 2rem; border-radius: 1rem; box-shadow: 0 10px 25px -5px rgba(0,0,0,0.1), 0 10px 10px -5px rgba(0,0,0,0.04); transform: scale(0.95); transition: transform 0.3s ease; max-width: 500px; width: 90%; }
        .modal-backdrop.show .modal-content { transform: scale(1); }
        .discovery-card, .leaderboard-item { animation: slideIn 0.5s ease-out forwards; }
        @keyframes slideIn { from { opacity: 0; transform: translateX(-20px); } to { opacity: 1; transform: translateX(0); } }
    </style>
</head>
<body class="antialiased text-slate-800">

    <div class="container mx-auto p-4 sm:p-6 lg:p-8 max-w-7xl">
        <div class="bg-white rounded-2xl shadow-2xl shadow-slate-200 overflow-hidden">
            
            <!-- Header Section -->
            <header class="p-6 sm:p-8 text-white header-gradient">
                <div class="flex justify-between items-center mb-2">
                    <h1 class="text-3xl sm:text-4xl font-extrabold tracking-tight">üî¨ Science Data Detective</h1>
                    <div class="flex gap-2">
                        <button id="glossary-btn-header" class="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center text-2xl hover:bg-white/30" aria-label="Open Glossary">üìñ</button>
                        <button id="help-btn-header" class="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center text-2xl hover:bg-white/30" aria-label="Open Help">‚ùì</button>
                    </div>
                </div>
                <div class="bg-black/20 text-sm inline-block px-3 py-1 rounded-full mb-4">Your Anonymous ID: <span id="userId" class="font-bold">Loading...</span></div>
                <p class="text-lg text-indigo-200">Unlock insights by exploring, questioning, and discovering patterns in data.</p>
                <div class="mt-6">
                    <div class="flex justify-between items-center mb-1">
                        <span id="progressText" class="font-semibold text-indigo-100">Level 1: Getting Started</span>
                        <span id="progressPercentage" class="font-bold text-white">0%</span>
                    </div>
                    <div class="w-full bg-white/20 rounded-full h-4"><div id="progressBar" class="bg-amber-400 h-4 rounded-full transition-all duration-500 ease-out" style="width: 0%;"></div></div>
                </div>
            </header>

            <!-- Level Navigation -->
            <nav class="p-4 border-b border-slate-200"><div class="flex flex-wrap gap-3" role="tablist">
                <button class="level-btn active font-semibold py-3 px-5 rounded-full" data-level="1" role="tab" aria-selected="true"><span class="mr-2">üìä</span> Level 1</button>
                <button class="level-btn locked font-semibold py-3 px-5 rounded-full" data-level="2" role="tab" aria-selected="false"><span class="mr-2">üéØ</span> Level 2</button>
                <button class="level-btn locked font-semibold py-3 px-5 rounded-full" data-level="3" role="tab" aria-selected="false"><span class="mr-2">üîç</span> Level 3</button>
                <button class="level-btn locked font-semibold py-3 px-5 rounded-full" data-level="4" role="tab" aria-selected="false"><span class="mr-2">üí°</span> Level 4</button>
                <button class="level-btn locked font-semibold py-3 px-5 rounded-full" data-level="5" role="tab" aria-selected="false"><span class="mr-2">üöÄ</span> Level 5</button>
            </div></nav>

            <!-- Main Content Area -->
            <main class="p-6 sm:p-8">
                <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <div class="lg:col-span-2">
                        <!-- Level content will be injected by JavaScript -->
                        <div class="level-content active" id="level1"></div>
                        <div class="level-content hidden" id="level2"></div>
                        <div class="level-content hidden" id="level3"></div>
                        <div class="level-content hidden" id="level4"></div>
                        <div class="level-content hidden" id="level5"></div>
                    </div>
                    <!-- Sidebar -->
                    <aside class="lg:col-span-1 space-y-8">
                        <div class="bg-slate-50 p-6 rounded-xl border border-slate-200 sticky top-8">
                            <h3 class="text-xl font-bold text-slate-700 mb-4">üèÜ Live Leaderboard</h3>
                            <div id="leaderboard" class="space-y-3">
                                <p class="text-slate-500">Scores from the live challenges in Level 5 will appear here!</p>
                            </div>
                        </div>
                        <div class="bg-slate-50 p-6 rounded-xl border border-slate-200 sticky top-8">
                            <h3 class="text-xl font-bold text-slate-700 mb-4">üõ∞Ô∏è Live Discovery Wall</h3>
                            <div id="discoveryWall" class="space-y-4 max-h-[50vh] overflow-y-auto">
                                <p class="text-slate-500">Discoveries from your classmates will appear here in real-time!</p>
                            </div>
                        </div>
                    </aside>
                </div>
            </main>
        </div>
    </div>

    <!-- Modals will be injected by JavaScript -->
    <div id="achievementModal" class="modal-backdrop"></div>
    <div id="helpModal" class="modal-backdrop"></div>
    <div id="infoModal" class="modal-backdrop"></div>
    <div id="glossaryModal" class="modal-backdrop"></div>

    <!-- Firebase SDK -->
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, serverTimestamp, query, orderBy, doc, setDoc, getDoc, updateDoc, increment } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

        // --- DATA SOURCE ---
        const wellnessData = [
            { "id": 1, "emotional": 2, "physical": 3, "intellectual": 4, "social": 5, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 3, "management": 5, "awareness": 5, "learning_style": "Visual", "group_role": "Creator" }, { "id": 2, "emotional": 5, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 3, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 4, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 5, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 6, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 7, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 8, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 9, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 10, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 11, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 12, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 13, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 14, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 15, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 16, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 17, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Visual", "group_role": "Creator" }, { "id": 18, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 19, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 20, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 21, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 22, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 23, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 24, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 25, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 26, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 27, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 28, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 29, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 30, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 31, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 32, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 33, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 34, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 35, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 36, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 37, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Visual", "group_role": "Creator" }, { "id": 38, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 39, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 40, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 41, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 42, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 43, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 44, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 45, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 46, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 47, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 48, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 49, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 50, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 51, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 52, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 53, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 54, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 55, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 56, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 57, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Visual", "group_role": "Creator" }, { "id": 58, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 59, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 60, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 61, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 62, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 63, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 64, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 65, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 66, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 67, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 68, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Reading/Writing", "group_role": "Researcher" }, { "id": 69, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Visual", "group_role": "Creator" }, { "id": 70, "emotional": 4, "physical": 4, "intellectual": 4, "social": 4, "wonder": 4, "environmental": 4, "purpose": 4, "resource": 4, "growth": 4, "persistence": 4, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Auditory", "group_role": "Leader" }, { "id": 71, "emotional": 4, "physical": 5, "intellectual": 4, "social": 5, "wonder": 5, "environmental": 4, "purpose": 5, "resource": 4, "growth": 5, "persistence": 5, "confidence": 4, "management": 4, "awareness": 4, "learning_style": "Kinesthetic", "group_role": "Organizer" }, { "id": 72, "emotional": 4, "physical": 5, "intellectual": 5, "social": 5, "wonder": 5, "environmental": 5, "purpose": 5, "resource": 5, "growth": 5, "persistence": 5, "confidence": 5, "management": 5, "awareness": 5, "learning_style": "Reading/Writing", "group_role": "Researcher" }
        ];
        const wellnessFields = { emotional: "üòä Emotional Wellness", physical: "üí™ Physical Wellness", intellectual: "üß† Intellectual Wellness", social: "üë• Social Wellness", wonder: "‚ú® Sense of Wonder", environmental: "üåç Environmental Awareness", purpose: "üéØ Purpose & Contribution", resource: "üì¶ Resource Management", growth: "üìà Growth Mindset", persistence: "üí´ Persistence", confidence: "üí™ Self-Confidence", management: "‚ö° Self-Management", awareness: "üëÅÔ∏è Social Awareness" };
        const categoricalFields = { learning_style: "üéì Learning Style", group_role: "ü§ù Group Role" };

        // --- STATE MANAGEMENT ---
        const state = {
            currentLevel: 1, unlockedLevels: [1], patternsFound: 0, questionsAsked: 0, discoveriesMade: 0,
            charts: {}, lastCorrelation: null, currentChallenge: null, userId: null, db: null, scores: {}
        };

        // --- CHALLENGES ---
        const challenges = [
            { id: 0, question: "Which learning style reports the highest average 'Sense of Wonder'?", x: 'learning_style', y: 'wonder', type: 'bar' },
            { id: 1, question: "Is there a positive correlation between 'Growth Mindset' and 'Persistence'?", x: 'growth', y: 'persistence', type: 'scatter' },
            { id: 2, question: "Which group role has the lowest average 'Social Awareness'?", x: 'group_role', y: 'awareness', type: 'bar' }
        ];

        // --- FIREBASE SETUP ---
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "...", authDomain: "...", projectId: "..." };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        state.db = getFirestore(app);

        // --- AUTHENTICATION ---
        async function initializeAuth() {
            try {
                const customToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
                if (customToken) {
                    await signInWithCustomToken(auth, customToken);
                } else {
                    await signInAnonymously(auth);
                }
            } catch (error) {
                console.error("Authentication failed:", error);
                document.getElementById('userId').textContent = 'Auth Error';
            }
        }

        onAuthStateChanged(auth, user => {
            if (user) {
                state.userId = user.uid;
                document.getElementById('userId').textContent = state.userId.substring(0, 8);
                setupRealtimeListeners();
            } else {
                state.userId = null;
                document.getElementById('userId').textContent = 'Not Signed In';
            }
        });

        // --- REAL-TIME LISTENERS ---
        function setupRealtimeListeners() {
            // Discoveries Listener
            const discoveriesCol = collection(state.db, `/artifacts/${appId}/public/data/discoveries`);
            const qDiscoveries = query(discoveriesCol, orderBy('createdAt', 'desc'));
            onSnapshot(qDiscoveries, (snapshot) => {
                const wall = document.getElementById('discoveryWall');
                wall.innerHTML = ''; 
                if (snapshot.empty) {
                    wall.innerHTML = `<p class="text-slate-500">No discoveries yet. Be the first!</p>`;
                    return;
                }
                snapshot.forEach(doc => {
                    const discovery = doc.data();
                    const card = document.createElement('div');
                    card.className = `discovery-card p-4 bg-white rounded-lg border-2 ${discovery.authorId === state.userId ? 'border-indigo-500' : 'border-slate-200'}`;
                    card.innerHTML = `<p class="text-slate-800">${discovery.text}</p><p class="text-xs text-slate-400 mt-2">By: ${discovery.authorId.substring(0, 8)}</p>`;
                    wall.appendChild(card);
                });
            });

            // Live Challenge Listener
            const challengeDoc = doc(state.db, `/artifacts/${appId}/public/data/liveChallenge/activeChallenge`);
            onSnapshot(challengeDoc, (doc) => {
                if (doc.exists()) {
                    state.currentChallenge = doc.data();
                    const { id, question, startedBy } = state.currentChallenge;
                    if (id !== null) {
                        showInfoModal(`Live Challenge Started by ${startedBy.substring(0,8)}!`, question);
                        document.getElementById('challengeTitle').innerText = `Live Challenge!`;
                        document.getElementById('challengeQuestion').innerText = question;
                        switchLevel(5); // Force everyone to level 5
                    }
                }
            });

            // Scores Listener
            const scoresCol = collection(state.db, `/artifacts/${appId}/public/data/scores`);
            const qScores = query(scoresCol, orderBy('score', 'desc'));
            onSnapshot(qScores, (snapshot) => {
                const leaderboard = document.getElementById('leaderboard');
                leaderboard.innerHTML = '';
                if (snapshot.empty) {
                    leaderboard.innerHTML = `<p class="text-slate-500">No scores yet. Answer a live challenge correctly to get on the board!</p>`;
                    return;
                }
                let rank = 1;
                snapshot.forEach(doc => {
                    const userScore = doc.data();
                    const item = document.createElement('div');
                    item.className = `leaderboard-item flex justify-between items-center p-3 bg-white rounded-lg ${doc.id === state.userId ? 'ring-2 ring-indigo-500' : ''}`;
                    item.innerHTML = `
                        <div>
                            <span class="font-bold">${rank}. ${doc.id.substring(0, 8)}</span>
                        </div>
                        <span class="font-bold text-indigo-600">${userScore.score} pts</span>
                    `;
                    leaderboard.appendChild(item);
                    rank++;
                });
            });
        }
        
        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('level1').innerHTML = generateLevel1HTML();
            document.getElementById('level2').innerHTML = generateLevel2HTML();
            document.getElementById('level3').innerHTML = generateLevel3HTML();
            document.getElementById('level4').innerHTML = generateLevel4HTML();
            document.getElementById('level5').innerHTML = generateLevel5HTML();
            
            document.getElementById('achievementModal').innerHTML = generateModalHTML('achievementModal', 'üèÜ', 'Achievement Unlocked!', 'You are making great progress!');
            document.getElementById('helpModal').innerHTML = generateHelpModalHTML();
            document.getElementById('infoModal').innerHTML = generateModalHTML('infoModal', 'üí°', 'Heads Up!', 'Something to be aware of.');
            document.getElementById('glossaryModal').innerHTML = generateGlossaryModalHTML();
            
            populateSelects();
            setupEventListeners();
            updateUI();
            document.getElementById('stat1').innerText = wellnessData.length;
            
            initializeAuth();
        });

        function populateSelects() {
            const allFields = {...wellnessFields, ...categoricalFields};
            const numericFields = wellnessFields;
            const selectsToPopulate = [
                { id: 'xAxis', data: allFields, placeholder: 'X-Axis (Horizontal)' },
                { id: 'yAxis', data: numericFields, placeholder: 'Y-Axis (Vertical)' },
                { id: 'challengeXAxis', data: allFields, placeholder: 'X-Axis' },
                { id: 'challengeYAxis', data: numericFields, placeholder: 'Y-Axis' }
            ];
            selectsToPopulate.forEach(s => {
                const select = document.getElementById(s.id);
                if (!select) return;
                select.innerHTML = '';
                const placeholderOption = document.createElement('option');
                placeholderOption.value = "";
                placeholderOption.textContent = s.placeholder;
                select.appendChild(placeholderOption);
                for (const [key, value] of Object.entries(s.data)) {
                    const option = document.createElement('option');
                    option.value = key;
                    option.textContent = value;
                    select.appendChild(option);
                }
            });
        }
        
        function setupEventListeners() {
            document.getElementById('glossary-btn-header').addEventListener('click', showGlossaryModal);
            document.getElementById('help-btn-header').addEventListener('click', showHelpModal);
            document.querySelectorAll('.level-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    if (!btn.classList.contains('locked')) switchLevel(parseInt(btn.dataset.level));
                });
            });
            document.querySelectorAll('.modal-backdrop').forEach(modal => {
                const closeButton = modal.querySelector('button');
                if(closeButton) closeButton.addEventListener('click', () => closeModal(modal.id));
            });
            document.getElementById('l1-explore-btn').addEventListener('click', exploreBasicData);
            document.getElementById('l2-compare-btn').addEventListener('click', compareData);
            document.getElementById('l2-pattern-positive').addEventListener('click', () => selectPattern('positive'));
            document.getElementById('l2-pattern-negative').addEventListener('click', () => selectPattern('negative'));
            document.getElementById('l2-pattern-none').addEventListener('click', () => selectPattern('none'));
            document.getElementById('l2-glossary-link').addEventListener('click', showGlossaryModal);
            document.getElementById('l3-show-data-btn').addEventListener('click', exploreForQuestions);
            document.getElementById('l3-template-calculate').addEventListener('click', () => useTemplate('calculate'));
            document.getElementById('l3-template-compare').addEventListener('click', () => useTemplate('compare'));
            document.getElementById('l3-template-predict').addEventListener('click', () => useTemplate('predict'));
            document.getElementById('l3-template-explain').addEventListener('click', () => useTemplate('explain'));
            document.getElementById('l3-submit-question-btn').addEventListener('click', submitQuestion);
            document.getElementById('l4-build-graph-btn').addEventListener('click', buildCustomGraph);
            document.getElementById('l4-save-discovery-btn').addEventListener('click', saveDiscovery);
            document.getElementById('l5-new-challenge-btn').addEventListener('click', startChallenge);
            document.getElementById('l5-check-answer-btn').addEventListener('click', checkChallengeAnswer);
        }

        function updateUI() {
            const progress = (state.unlockedLevels.length - 1) / 4 * 100;
            document.getElementById('progressBar').style.width = `${progress}%`;
            document.getElementById('progressPercentage').innerText = `${Math.round(progress)}%`;
            const levelTitles = ['Getting Started', 'Finding Patterns', 'Asking Questions', 'Making Discoveries', 'Challenge Mode'];
            document.getElementById('progressText').innerText = `Level ${state.currentLevel}: ${levelTitles[state.currentLevel - 1]}`;

            document.querySelectorAll('.level-btn').forEach(btn => {
                const level = parseInt(btn.dataset.level);
                btn.classList.toggle('active', level === state.currentLevel);
                btn.setAttribute('aria-selected', level === state.currentLevel);
                btn.classList.toggle('locked', !state.unlockedLevels.includes(level));
            });

            document.querySelectorAll('.level-content').forEach(content => {
                content.classList.add('hidden');
                content.classList.remove('active');
            });
            const activeContent = document.getElementById(`level${state.currentLevel}`);
            if (activeContent) {
                activeContent.classList.remove('hidden');
                activeContent.classList.add('active');
            }
            
            if(document.getElementById('stat3')) {
                document.getElementById('stat3').innerText = state.patternsFound;
            }
        }
        function switchLevel(level) {
            state.currentLevel = level;
            updateUI();
        }
        function unlockLevel(level) {
            if (!state.unlockedLevels.includes(level)) {
                state.unlockedLevels.push(level);
                updateUI();
            }
        }
        function renderChart(canvasId, config) {
            if (state.charts[canvasId]) {
                state.charts[canvasId].destroy();
            }
            if (!config) return;
            const ctx = document.getElementById(canvasId).getContext('2d');
            state.charts[canvasId] = new Chart(ctx, config);
        }

        function exploreBasicData() {
            const selection = document.getElementById('wellness1').value;
            let chartConfig;
            if (selection === 'all') {
                const fields = Object.keys(wellnessFields);
                const averages = fields.map(field => (wellnessData.reduce((acc, s) => acc + s[field], 0) / wellnessData.length));
                chartConfig = { type: 'bar', data: { labels: fields.map(f => wellnessFields[f].split(' ')[1]), datasets: [{ label: 'Class Average Score', data: averages, backgroundColor: 'rgba(79, 70, 229, 0.8)'}] }, options: { scales: { y: { beginAtZero: true, max: 5 } }, responsive: true, maintainAspectRatio: false } };
            } else {
                const distribution = [0, 0, 0, 0, 0];
                wellnessData.forEach(student => { const score = Math.max(1, Math.min(5, student[selection])); distribution[score - 1]++; });
                chartConfig = { type: 'doughnut', data: { labels: ['Score 1', 'Score 2', 'Score 3', 'Score 4', 'Score 5'], datasets: [{ data: distribution, backgroundColor: ['#ef4444', '#f97316', '#3b82f6', '#22c55e', '#a855f7'] }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'right' } } } };
            }
            renderChart('chart1', chartConfig);
            if (state.patternsFound < 1) {
                 state.patternsFound++;
                 showAchievement('First Insight!', 'You created your first graph. Keep exploring!');
                 unlockLevel(2);
            }
            updateUI();
        }
        function calculateCorrelation(data, field1, field2) {
            let n = data.length, sum_x = 0, sum_y = 0, sum_xy = 0, sum_x2 = 0, sum_y2 = 0;
            for (let i = 0; i < n; i++) {
                sum_x += data[i][field1]; sum_y += data[i][field2]; sum_xy += data[i][field1] * data[i][field2];
                sum_x2 += data[i][field1] * data[i][field1]; sum_y2 += data[i][field2] * data[i][field2];
            }
            const num = n * sum_xy - sum_x * sum_y;
            const den = Math.sqrt((n * sum_x2 - sum_x * sum_x) * (n * sum_y2 - sum_y * sum_y));
            return den === 0 ? 0 : num / den;
        }
        function compareData() {
            const field1 = document.getElementById('compare1').value;
            const field2 = document.getElementById('compare2').value;
            if (field1 === field2) return showInfoModal("Selection Error", "Please select two different wellness areas to compare.");
            state.lastCorrelation = calculateCorrelation(wellnessData, field1, field2);
            renderChart('chart2', generateScatterConfig(field1, field2));
        }
        function selectPattern(userChoice) {
            if (state.lastCorrelation === null) return showInfoModal("Analyze First!", "Please click 'Compare' to generate a graph first.");
            let actualPattern = state.lastCorrelation > 0.3 ? 'positive' : state.lastCorrelation < -0.3 ? 'negative' : 'none';
            if (userChoice === actualPattern) {
                showAchievement("Excellent Observation!", `You're right! The data shows a ${actualPattern} relationship. (Correlation: ${state.lastCorrelation.toFixed(2)})`);
                unlockLevel(3);
            } else {
                showInfoModal("Good Try!", `You chose '${userChoice}', but the data actually shows a '${actualPattern}' relationship. (Correlation: ${state.lastCorrelation.toFixed(2)})`);
            }
            state.patternsFound++;
            updateUI();
        }
        function exploreForQuestions() {
            const type = document.getElementById('exploreType').value;
            renderChart('chart3', generateBarLineConfig(type, 'id', 'pie'));
        }
        function useTemplate(type) {
            const el = document.getElementById('customQuestion');
            const templates = {
                calculate: "What percentage of students prefer Visual learning vs. Auditory learning?",
                compare: "Which group has a higher average Self-Confidence score: 'Leaders' or 'Researchers'?",
                predict: "If we surveyed 100 more students, how many would likely prefer a 'Creator' role?",
                explain: "Why might there be a connection between Learning Style and Intellectual Wellness?"
            };
            el.value = templates[type];
            el.focus();
        }
        function submitQuestion() {
            const question = document.getElementById('customQuestion').value;
            if (question.length < 15) return showInfoModal("Question Too Short", "Please write a more detailed question.");
            state.questionsAsked++;
            showAchievement('Question Logged!', `Great question! You've crafted ${state.questionsAsked} so far.`);
            document.getElementById('customQuestion').value = '';
            unlockLevel(4);
        }

        async function saveDiscovery() {
            const discoveryText = document.getElementById('discoveryText').value;
            if (discoveryText.length < 20) return showInfoModal("More Detail Needed", "Please describe your discovery in more detail.");
            if (!state.userId || !state.db) return showInfoModal("Connection Error", "Cannot connect to the database. Please refresh.");
            const button = document.getElementById('l4-save-discovery-btn');
            button.disabled = true;
            button.innerHTML = 'Saving...';
            try {
                await addDoc(collection(state.db, `/artifacts/${appId}/public/data/discoveries`), {
                    text: discoveryText, authorId: state.userId, createdAt: serverTimestamp()
                });
                state.discoveriesMade++;
                showAchievement('Discovery Shared!', `It's on the Live Wall! You've made ${state.discoveriesMade} discoveries.`);
                document.getElementById('discoveryText').value = '';
                unlockLevel(5);
            } catch (error) {
                console.error("Error adding document: ", error);
                showInfoModal("Save Failed", "Could not save your discovery. Please check your connection and try again.");
            } finally {
                button.disabled = false;
                button.innerHTML = 'Share to Discovery Wall';
            }
        }

        function buildCustomGraph() {
            const xField = document.getElementById('xAxis').value;
            const yField = document.getElementById('yAxis').value;
            const type = document.getElementById('graphType').value;
            if (!xField || !yField) return showInfoModal("Selection Missing", "Please select a variable for both axes.");
            if (xField === yField) return showInfoModal("Selection Error", "Please select different variables for the axes.");
            renderChart('chart4', type === 'scatter' ? generateScatterConfig(xField, yField) : generateBarLineConfig(xField, yField, type));
        }
        
        async function startChallenge() {
            const challengeIndex = Math.floor(Math.random() * challenges.length);
            const newChallenge = challenges[challengeIndex];
            const challengeRef = doc(state.db, `/artifacts/${appId}/public/data/liveChallenge/activeChallenge`);
            try {
                await setDoc(challengeRef, { ...newChallenge, startedBy: state.userId, solvedBy: null });
            } catch (error) {
                console.error("Failed to start challenge:", error);
                showInfoModal("Error", "Could not start a new live challenge.");
            }
        }

        async function checkChallengeAnswer() {
            if (!state.currentChallenge || state.currentChallenge.solvedBy) {
                return showInfoModal("Challenge Over", "This challenge has already been solved. Start a new one!");
            }
            const { x, y, type } = state.currentChallenge;
            const userX = document.getElementById('challengeXAxis').value;
            const userY = document.getElementById('challengeYAxis').value;
            const userType = document.getElementById('challengeGraphType').value;

            renderChart('chart5', userType === 'scatter' ? generateScatterConfig(userX, userY) : generateBarLineConfig(userX, userY, userType));

            if (userX === x && userY === y && userType === type) {
                const challengeRef = doc(state.db, `/artifacts/${appId}/public/data/liveChallenge/activeChallenge`);
                await updateDoc(challengeRef, { solvedBy: state.userId });
                
                const scoreRef = doc(state.db, `/artifacts/${appId}/public/data/scores/${state.userId}`);
                const docSnap = await getDoc(scoreRef);
                if (docSnap.exists()) {
                    await updateDoc(scoreRef, { score: increment(10) });
                } else {
                    await setDoc(scoreRef, { score: 10 });
                }
                showAchievement("Challenge Solved!", "You were the first to find the answer! +10 points!");
            } else {
                showInfoModal("Keep Trying!", "That's not quite the right graph to answer the question. Check your axes and graph type!");
            }
        }

        function generateScatterConfig(xField, yField) {
            if (categoricalFields[xField] || categoricalFields[yField]) {
                showInfoModal("Graphing Error", "Scatter plots require numeric data (like wellness scores) for both axes.");
                return null;
            }
            const data = wellnessData.map(s => ({ x: s[xField] + (Math.random() - 0.5) * 0.2, y: s[yField] + (Math.random() - 0.5) * 0.2 }));
            return { type: 'scatter', data: { datasets: [{ label: 'Student Data', data, backgroundColor: 'rgba(14, 165, 233, 0.7)' }] }, options: { responsive: true, maintainAspectRatio: false, scales: { x: { title: { display: true, text: wellnessFields[xField] } }, y: { title: { display: true, text: wellnessFields[yField] } } } } };
        }
        function generateBarLineConfig(xField, yField, type) {
            if (!categoricalFields[xField]) {
                showInfoModal("Graphing Error", "This chart type requires a categorical variable (like Learning Style) on the X-Axis.");
                return null;
            }
            if (type === 'pie' && yField !== 'id') {
                showInfoModal("Graphing Error", "Pie charts are for showing distribution of a category, not averages.");
                return null;
            }
            const categories = [...new Set(wellnessData.map(s => s[xField]))];
            let data, label;
            if (yField === 'id' && type === 'pie') {
                data = categories.map(cat => wellnessData.filter(s => s[xField] === cat).length);
                label = 'Number of Students';
            } else {
                if(categoricalFields[yField]) {
                    showInfoModal("Graphing Error", "The Y-Axis must be numeric for Bar and Line charts.");
                    return null;
                }
                data = categories.map(cat => {
                    const filteredData = wellnessData.filter(s => s[xField] === cat);
                    return filteredData.reduce((acc, s) => acc + s[yField], 0) / filteredData.length;
                });
                label = `Average ${wellnessFields[yField]}`;
            }
            return { type, data: { labels: categories, datasets: [{ label, data, backgroundColor: ['#2dd4bf', '#fbbf24', '#60a5fa', '#f87171', '#c084fc'] }] }, options: { responsive: true, maintainAspectRatio: false, scales: { y: { display: type !== 'pie', beginAtZero: true, title: { display: true, text: `Average Score` } } }, plugins: { legend: { position: type === 'pie' ? 'right' : 'top' } } } };
        }

        function showModal(modalId, title, text) {
            const modal = document.getElementById(modalId);
            if (title) modal.querySelector('h2').innerText = title;
            if (text) modal.querySelector('p').innerText = text;
            modal.classList.add('show');
        }
        function closeModal(modalId) { document.getElementById(modalId).classList.remove('show'); }
        function showHelpModal() { showModal('helpModal'); }
        function showGlossaryModal() { showModal('glossaryModal'); }
        function showAchievement(title, text) { showModal('achievementModal', title, text); }
        function showInfoModal(title, text) { showModal('infoModal', title, text); }
        
        function generateLevel1HTML() { return `<div class="bg-blue-50 border-l-4 border-blue-500 text-blue-800 p-4 rounded-r-lg mb-6"><h3 class="font-bold text-xl mb-1">üéÆ Welcome, Data Detective!</h3><p>Explore our class's wellness data. Your first mission is to visualize the data and find your first insight!</p></div><div class="bg-slate-50 p-6 rounded-xl border border-slate-200"><h3 class="text-xl font-bold text-slate-700 mb-4">Choose What to Explore</h3><div class="flex flex-col sm:flex-row gap-4 items-center"><select id="wellness1" class="w-full sm:w-auto flex-grow p-3 border border-slate-300 rounded-lg"><option value="all">All Wellness Areas (Average)</option><option value="emotional">üòä Emotional Wellness</option><option value="physical">üí™ Physical Wellness</option><option value="intellectual">üß† Intellectual Wellness</option><option value="social">üë• Social Wellness</option><option value="wonder">‚ú® Sense of Wonder</option><option value="environmental">üåç Environmental Awareness</option><option value="purpose">üéØ Purpose & Contribution</option><option value="resource">üì¶ Resource Management</option><option value="growth">üìà Growth Mindset</option><option value="persistence">üí´ Persistence</option><option value="confidence">üí™ Self-Confidence</option><option value="management">‚ö° Self-Management</option><option value="awareness">üëÅÔ∏è Social Awareness</option></select><button id="l1-explore-btn" class="w-full sm:w-auto bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-indigo-700">Explore</button></div></div><div class="mt-6 bg-white p-4 rounded-xl shadow-md min-h-[400px]"><canvas id="chart1"></canvas></div><div class="mt-6 grid grid-cols-1 sm:grid-cols-3 gap-6 text-white"><div class="stat-card-gradient p-6 rounded-xl text-center"><div class="text-4xl font-bold" id="stat1">0</div><div class="text-indigo-100">Students</div></div><div class="stat-card-gradient p-6 rounded-xl text-center"><div class="text-4xl font-bold" id="stat2">13</div><div class="text-indigo-100">Wellness Areas</div></div><div class="stat-card-gradient p-6 rounded-xl text-center"><div class="text-4xl font-bold" id="stat3">0</div><div class="text-indigo-100">Patterns Found</div></div></div>`; }
        function generateLevel2HTML() { return `<div class="bg-green-50 border-l-4 border-green-500 text-green-800 p-4 rounded-r-lg mb-6"><h3 class="font-bold text-xl mb-1">üéØ Pattern Hunter Mode!</h3><p>Compare two things to see if they're connected. Does "Growth Mindset" relate to "Persistence"? Let's find out!</p></div><div class="bg-slate-50 p-6 rounded-xl border border-slate-200"><h3 class="text-xl font-bold text-slate-700 mb-4">Compare Two Wellness Areas</h3><div class="grid grid-cols-1 md:grid-cols-3 gap-4 items-center"><select id="compare1" class="w-full p-3 border border-slate-300 rounded-lg"><option value="growth">üìà Growth Mindset</option><option value="persistence">üí´ Persistence</option><option value="confidence">üí™ Self-Confidence</option><option value="social">üë• Social Wellness</option><option value="wonder">‚ú® Sense of Wonder</option><option value="intellectual">üß† Intellectual Wellness</option></select><select id="compare2" class="w-full p-3 border border-slate-300 rounded-lg"><option value="persistence">üí´ Persistence</option><option value="confidence">üí™ Self-Confidence</option><option value="intellectual">üß† Intellectual Wellness</option><option value="emotional">üòä Emotional Wellness</option><option value="social">üë• Social Wellness</option></select><button id="l2-compare-btn" class="w-full bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-indigo-700">Compare</button></div></div><div class="mt-6 bg-white p-4 rounded-xl shadow-md min-h-[400px]"><canvas id="chart2"></canvas></div><div class="mt-6 bg-amber-50 p-6 rounded-xl border border-amber-200"><h3 class="text-xl font-bold text-slate-700 mb-4">üí≠ What Pattern Do You See? <span id="l2-glossary-link" class="glossary-link">[?]</span></h3><div class="flex flex-col sm:flex-row gap-4"><button id="l2-pattern-positive" class="w-full text-left p-4 bg-white rounded-lg border-2 hover:border-green-500">üìà Positive</button><button id="l2-pattern-negative" class="w-full text-left p-4 bg-white rounded-lg border-2 hover:border-red-500">üìâ Negative</button><button id="l2-pattern-none" class="w-full text-left p-4 bg-white rounded-lg border-2 hover:border-slate-500">ü§∑ No Pattern</button></div></div>`; }
        function generateLevel3HTML() { return `<div class="bg-purple-50 border-l-4 border-purple-500 text-purple-800 p-4 rounded-r-lg mb-6"><h3 class="font-bold text-xl mb-1">üîç Question Creator!</h3><p>Great detectives ask great questions. Use the data to create a question for your classmates.</p></div><div class="bg-slate-50 p-6 rounded-xl border border-slate-200"><h3 class="text-xl font-bold text-slate-700 mb-4">Explore Learning & Group Styles</h3><div class="flex flex-col sm:flex-row gap-4 items-center"><select id="exploreType" class="w-full sm:w-auto flex-grow p-3 border border-slate-300 rounded-lg"><option value="learning_style">How Students Learn Best</option><option value="group_role">Preferred Group Work Role</option></select><button id="l3-show-data-btn" class="w-full sm:w-auto bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-indigo-700">Show Data</button></div></div><div class="mt-6 bg-white p-4 rounded-xl shadow-md min-h-[400px]"><canvas id="chart3"></canvas></div><div class="mt-6 bg-cyan-50 p-6 rounded-xl border border-cyan-200"><h3 class="text-xl font-bold text-slate-700 mb-4">‚úèÔ∏è Build Your Question</h3><div class="grid grid-cols-1 sm:grid-cols-2 gap-3 mb-4"><button id="l3-template-calculate" class="text-left p-3 bg-white rounded-lg border-2 hover:border-indigo-500">üßÆ "What percentage..."</button><button id="l3-template-compare" class="text-left p-3 bg-white rounded-lg border-2 hover:border-indigo-500">‚öñÔ∏è "Which group has..."</button><button id="l3-template-predict" class="text-left p-3 bg-white rounded-lg border-2 hover:border-indigo-500">üîÆ "If we surveyed..."</button><button id="l3-template-explain" class="text-left p-3 bg-white rounded-lg border-2 hover:border-indigo-500">üí° "Why do you think..."</button></div><textarea id="customQuestion" rows="3" class="w-full p-3 border border-slate-300 rounded-lg" placeholder="Write your question here..."></textarea><button id="l3-submit-question-btn" class="mt-4 w-full sm:w-auto bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-indigo-700">Submit Question</button></div>`; }
        function generateLevel4HTML() { return `<div class="bg-red-50 border-l-4 border-red-500 text-red-800 p-4 rounded-r-lg mb-6"><h3 class="font-bold text-xl mb-1">üí° Discovery Lab!</h3><p>Build custom graphs to find hidden patterns. When you find something interesting, share it to the Live Discovery Wall!</p></div><div class="bg-slate-50 p-6 rounded-xl border border-slate-200"><h3 class="text-xl font-bold text-slate-700 mb-4">Graph Builder</h3><div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-center"><select id="xAxis" class="w-full p-3 border border-slate-300 rounded-lg"></select><select id="yAxis" class="w-full p-3 border border-slate-300 rounded-lg"></select><select id="graphType" class="w-full p-3 border border-slate-300 rounded-lg"><option value="scatter">Scatter Plot</option><option value="bar">Bar Chart</option><option value="line">Line Graph</option></select><button id="l4-build-graph-btn" class="w-full bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-indigo-700">Build Graph</button></div></div><div class="mt-6 bg-white p-4 rounded-xl shadow-md min-h-[400px]"><canvas id="chart4"></canvas></div><div class="mt-6 bg-emerald-50 p-6 rounded-xl border border-emerald-200"><h3 class="text-xl font-bold text-slate-700 mb-4">üìù Document Your Discovery</h3><textarea id="discoveryText" rows="4" class="w-full p-3 border border-slate-300 rounded-lg" placeholder="I discovered that students with high 'Persistence' also tend to have high 'Self-Confidence'. I think this is because..."></textarea><button id="l4-save-discovery-btn" class="mt-4 w-full sm:w-auto bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-indigo-700">Share to Discovery Wall</button></div>`; }
        function generateLevel5HTML() { return `<div class="bg-yellow-50 border-l-4 border-yellow-500 text-yellow-800 p-4 rounded-r-lg mb-6"><h3 class="font-bold text-xl mb-1">üöÄ Live Challenge Mode!</h3><p>Start a challenge for the whole class or solve one that's in progress. Use the Graph Builder to find the answer fast!</p></div><div id="challengeContainer" class="bg-slate-800 text-white p-6 rounded-xl text-center"><h3 class="text-2xl font-bold mb-2" id="challengeTitle">No Active Challenge</h3><p class="text-lg text-slate-300" id="challengeQuestion">Click the button below to start a new live challenge for everyone!</p><button id="l5-new-challenge-btn" class="mt-4 bg-amber-500 text-slate-900 font-bold py-2 px-6 rounded-lg hover:bg-amber-400">Start a New Live Challenge</button></div><div class="mt-6 bg-slate-50 p-6 rounded-xl border border-slate-200"><h3 class="text-xl font-bold text-slate-700 mb-4">Challenge Graph Builder</h3><div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-center"><select id="challengeXAxis" class="w-full p-3 border border-slate-300 rounded-lg"></select><select id="challengeYAxis" class="w-full p-3 border border-slate-300 rounded-lg"></select><select id="challengeGraphType" class="w-full p-3 border border-slate-300 rounded-lg"><option value="bar">Bar Chart</option><option value="scatter">Scatter Plot</option><option value="line">Line Graph</option></select><button id="l5-check-answer-btn" class="w-full bg-green-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-green-700">Submit Answer</button></div></div><div class="mt-6 bg-white p-4 rounded-xl shadow-md min-h-[400px]"><canvas id="chart5"></canvas></div>`; }
        function generateModalHTML(id, icon, title, text) { return `<div class="modal-content text-center"><div class="text-6xl mb-4">${icon}</div><h2 class="text-2xl font-bold text-slate-800 mb-2">${title}</h2><p class="text-slate-600 mb-6">${text}</p><button class="bg-indigo-600 text-white font-semibold py-2 px-6 rounded-lg">OK</button></div>`; }
        function generateHelpModalHTML() { return `<div class="modal-content"><h2 class="text-2xl font-bold text-slate-800 mb-4">How to Play</h2><div class="space-y-4 text-slate-600"><p><strong>Level 1-4:</strong> Progress through the levels to learn data analysis skills.</p><p><strong>Level 5:</strong> Start a live challenge for the class or solve an active one. The first to build the correct graph and submit wins points!</p><p><strong>Leaderboard:</strong> See who has the most points from solving live challenges.</p><p><strong>Discovery Wall:</strong> See insights your classmates have shared.</p></div><div class="mt-6 text-right"><button class="bg-indigo-600 text-white font-semibold py-2 px-6 rounded-lg">Got it!</button></div></div>`; }
        function generateGlossaryModalHTML() { return `<div class="modal-content"><h2 class="text-2xl font-bold text-slate-800 mb-4">üìñ Glossary</h2><div class="space-y-4 text-slate-600 max-h-[60vh] overflow-y-auto"><div><strong>Correlation:</strong> A measure of how closely two things are related.</div><div><strong>Scatter Plot:</strong> A graph that uses dots to show the relationship between two variables.</div><div><strong>Bar Chart:</strong> A graph that uses bars to compare the average values of different categories.</div><div><strong>X-Axis:</strong> The horizontal line (bottom) of a graph.</div><div><strong>Y-Axis:</strong> The vertical line (side) of a graph.</div></div><div class="mt-6 text-right"><button class="bg-indigo-600 text-white font-semibold py-2 px-6 rounded-lg">Close</button></div></div>`; }

    </script>
</body>
</html>
